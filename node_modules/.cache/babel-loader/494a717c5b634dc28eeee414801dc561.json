{"ast":null,"code":"var _jsxFileName = \"/Users/amaaljama/Desktop/AdzunaForm/adzunaform/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './index.css'; // My initial thought was to use 'useForm' as that is a custom hook for managing forms in an easier manner.  However, i settled to try and create an ideal form using the hook useState.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [values, setValues] = useState({\n    fullName: \"\",\n    message: \"\"\n  });\n  const [email, setEmail] = useState(\"\"); // I first placed email with fullName and message under values. However, i was having toruble validating the form and it recognising the email format. After a few tries I seprated the email from them and instead defined it seperately under the returns in onChange. It now needed an actual email with an '@' for the field to be valid. \n\n  const [submitted, setSubmitted] = useState(false);\n  const [valid, setValid] = useState(false);\n  const [characterCount, setCharacterCount] = useState();\n\n  const handleFullNameInputChange = event => {\n    setValues({ ...values,\n      fullName: event.target.value\n    });\n  };\n\n  const handleMessageInputChange = event => {\n    setValues({ ...values,\n      message: event.target.value\n    });\n    setCharacterCount({ ...values,\n      message: event.target.value.length\n    });\n  };\n\n  const handleSubmit = event => {\n    // event.preventDefault();\n    if (values.fullName && email && values.message) {\n      setValid(true);\n    }\n\n    setSubmitted(true);\n  }; // A problem here I was having that I yet to have figure out, due to the timeframe, is when the 'event.preventDefault();' was in the code it left the thank you message there with the details that was inputed into the field. It was not refreshing and removing it.\n\n\n  return (\n    /*#__PURE__*/\n    // As it all has to go under one parent element, I always resort to the fragment elements. To me it seems to present a cleaner code. \n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        class: \"logo\",\n        src: './images/logo.jpg',\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          class: \"form-register\",\n          onSubmit: handleSubmit,\n          children: [submitted && valid ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"message\",\n            children: \"Thank you! Message received.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 31\n          }, this) : true, /*#__PURE__*/_jsxDEV(\"input\", {\n            value: values.fullName,\n            onChange: handleFullNameInputChange,\n            placeholder: \"Full name\",\n            type: \"text\",\n            name: \"full Name\",\n            class: \"form-field-one\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            placeholder: \"Email address\",\n            type: \"email\",\n            name: \"email\",\n            class: \"form-field-two\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: values.message,\n            onChange: handleMessageInputChange,\n            onChange: event => setCharacterCount(event.target.value.length),\n            placeholder: \"Message\",\n            type: \"text\",\n            name: \"message\",\n            class: \"form-field-three\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"character-count\",\n            children: [\"Total Number of characters: \", characterCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"submit-button\",\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"TL/OFwqD22BQFLJTro9qGt+rPg4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/amaaljama/Desktop/AdzunaForm/adzunaform/src/App.js"],"names":["React","useState","App","values","setValues","fullName","message","email","setEmail","submitted","setSubmitted","valid","setValid","characterCount","setCharacterCount","handleFullNameInputChange","event","target","value","handleMessageInputChange","length","handleSubmit","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\n\n// My initial thought was to use 'useForm' as that is a custom hook for managing forms in an easier manner.  However, i settled to try and create an ideal form using the hook useState.\n\nfunction App() { \n  const [values, setValues] = useState ({\n    fullName: \"\",\n    message: \"\",\n  });\n  \n  const [email, setEmail] = useState(\"\");\n\n  // I first placed email with fullName and message under values. However, i was having toruble validating the form and it recognising the email format. After a few tries I seprated the email from them and instead defined it seperately under the returns in onChange. It now needed an actual email with an '@' for the field to be valid. \n\n  const [submitted, setSubmitted] = useState(false);\n  const [valid, setValid] = useState(false);\n\n  const [characterCount, setCharacterCount] = useState();\n\n  const handleFullNameInputChange = (event) => {\n    setValues({...values, fullName: event.target.value})\n  }\n\n  const handleMessageInputChange = (event) => {\n    setValues({...values, message: event.target.value});\n    setCharacterCount({...values, message: event.target.value.length})\n  }\n\n  const handleSubmit = (event) => {\n    // event.preventDefault();\n    if(values.fullName && email && values.message) {\n      setValid(true);\n    }\n    setSubmitted(true);\n  }\n  // A problem here I was having that I yet to have figure out, due to the timeframe, is when the 'event.preventDefault();' was in the code it left the thank you message there with the details that was inputed into the field. It was not refreshing and removing it.\n\n\n  return (\n    // As it all has to go under one parent element, I always resort to the fragment elements. To me it seems to present a cleaner code. \n   <>\n    <img class=\"logo\" src={'./images/logo.jpg'} alt=\"logo\"/>\n    <div class=\"form-container\">\n     <form class=\"form-register\" onSubmit={handleSubmit}>\n        {submitted && valid ? <div class=\"message\">Thank you! Message received.</div> : true}\n      <input\n        value={values.fullName}\n        onChange={handleFullNameInputChange}\n        placeholder=\"Full name\"\n        type=\"text\"\n        name=\"full Name\"\n        class=\"form-field-one\"\n        required\n      />\n      <input\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n        placeholder=\"Email address\"\n        type=\"email\"\n        name=\"email\"\n        class=\"form-field-two\"\n        required\n      />\n      <textarea\n        value={values.message}\n        onChange={handleMessageInputChange}\n        onChange={(event) => setCharacterCount(event.target.value.length)}\n        placeholder=\"Message\"\n        type=\"text\"\n        name=\"message\"\n        class=\"form-field-three\"\n        required\n      />\n      {/* \"required\" at the end of each of the element fields  */}\n      <p class=\"character-count\">Total Number of characters: {characterCount}</p>\n        <button class=\"submit-button\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n     </div>\n  </>\n  );\n}\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}